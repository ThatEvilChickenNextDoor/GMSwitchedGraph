from itertools import combinations
import numpy as np
import networkx as nx
print('imports complete')
seeds = np.asarray((
(1,1)+(0,)*12+(1,)*12+(0,)*24,
(1,1)+(0,)*24+(1,)*12+(0,)*12,
(1,1)+(0,)*36+(1,)*12,
(1,0,1)+(0,)*11+((1,)*4+(0,)*8)*3,
(1,0,1)+(0,)*11+((0,)*4+(1,)*4+(0,)*4)*3,
(1,0,1)+(0,)*11+((0,)*8+(1,)*4)*3
), 'uint8')
print('seeds generated')
G = nx.from_graph6_bytes(b'qsaCCA?_C?O?_?_???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????')
A = nx.to_numpy_array(G)
mat_inv = np.linalg.inv(3*np.identity(50)-A)
print('matrix generated')
combs = list(combinations(range(12),4))
l = len(combs)
comb_vecs=np.zeros((l, 12), 'uint8')
for i in range(l):
	for pos in combs[i]:
		comb_vecs[i, pos]=1
print('combinations generated')
first = np.repeat(comb_vecs, l**2, axis=0)
second = np.tile(
np.repeat(comb_vecs, l, axis=0),
(l,1))
third = np.tile(comb_vecs, (l**2, 1))
print('arrangements generated')
vecs = np.block([first, second, third])
print('arrangement complete')
del(first)
del(second)
del(third)
print('cleaned up')
#comp = np.around(np.linalg.multi_dot([vecs, mat_inv.T, seeds.T]), 9)
#print('comparison generated')
#mask = np.all(np.isin(comp, (3,0,-1)), axis=1)
#print(vecs[mask])
testblock = seeds@mat_inv
for v in vecs:
	print(np.dot(v, testblock))
	input('waiting...')